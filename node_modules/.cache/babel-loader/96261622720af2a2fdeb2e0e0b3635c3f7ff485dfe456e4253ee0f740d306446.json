{"ast":null,"code":"/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { Card } from \"../card/card\";\nimport { Checkbox, Switch } from \"../forms/controls\";\nimport { useCheckedControl } from \"./useCheckedControl\";\n/**\n * ControlCard component, used to render a {@link Card} with a form control.\n *\n * @internal\n */\nexport var ControlCard = React.forwardRef(function (props, ref) {\n  var _a;\n  var alignIndicator = props.alignIndicator,\n    _checked = props.checked,\n    labelContent = props.children,\n    className = props.className,\n    controlKind = props.controlKind,\n    _defaultChecked = props.defaultChecked,\n    disabled = props.disabled,\n    inputProps = props.inputProps,\n    inputRef = props.inputRef,\n    _onChange = props.onChange,\n    showAsSelectedWhenChecked = props.showAsSelectedWhenChecked,\n    cardProps = __rest(props, [\"alignIndicator\", \"checked\", \"children\", \"className\", \"controlKind\", \"defaultChecked\", \"disabled\", \"inputProps\", \"inputRef\", \"onChange\", \"showAsSelectedWhenChecked\"]);\n  var _b = useCheckedControl(props),\n    checked = _b.checked,\n    onChange = _b.onChange;\n  // use a container element to achieve a good flex layout\n  var labelElement = React.createElement(\"div\", {\n    className: Classes.CONTROL_CARD_LABEL\n  }, labelContent);\n  var controlProps = __assign({\n    alignIndicator: alignIndicator,\n    checked: checked,\n    disabled: disabled,\n    inline: true,\n    inputRef: inputRef,\n    labelElement: labelElement,\n    onChange: onChange\n  }, inputProps);\n  var classes = classNames(Classes.CONTROL_CARD, className, (_a = {}, _a[Classes.SELECTED] = showAsSelectedWhenChecked && checked, _a));\n  return React.createElement(Card, __assign({\n    interactive: !disabled,\n    className: classes,\n    ref: ref\n  }, cardProps), controlKind === \"switch\" ? React.createElement(Switch, __assign({}, controlProps)) : controlKind === \"checkbox\" ? React.createElement(Checkbox, __assign({}, controlProps)) : props.children);\n});\nControlCard.defaultProps = {\n  alignIndicator: \"right\",\n  showAsSelectedWhenChecked: true\n};\nControlCard.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".ControlCard\");","map":{"version":3,"names":["classNames","React","Classes","DISPLAYNAME_PREFIX","Card","Checkbox","Switch","useCheckedControl","ControlCard","forwardRef","props","ref","alignIndicator","_checked","checked","labelContent","children","className","controlKind","_defaultChecked","defaultChecked","disabled","inputProps","inputRef","_onChange","onChange","showAsSelectedWhenChecked","cardProps","__rest","_b","labelElement","createElement","CONTROL_CARD_LABEL","controlProps","__assign","inline","classes","CONTROL_CARD","_a","SELECTED","interactive","defaultProps","displayName","concat"],"sources":["D:\\app\\node_modules\\@blueprintjs\\core\\src\\components\\control-card\\controlCard.tsx"],"sourcesContent":["/*\n * Copyright 2023 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { Classes } from \"../../common\";\nimport { DISPLAYNAME_PREFIX, HTMLInputProps } from \"../../common/props\";\nimport { Card, CardProps } from \"../card/card\";\nimport type { CheckedControlProps, ControlProps } from \"../forms/controlProps\";\nimport { Checkbox, Switch } from \"../forms/controls\";\nimport { useCheckedControl } from \"./useCheckedControl\";\n\nexport type ControlKind = \"switch\" | \"checkbox\";\n\n/**\n * Subset of {@link Card} which can be used to adjust its behavior.\n */\ntype SupportedCardProps = Omit<CardProps, \"interactive\" | \"onChange\">;\n\n/**\n * Subset of {@link ControlProps} which can be used to adjust its behavior.\n */\ntype SupportedControlProps = Pick<ControlProps, keyof CheckedControlProps | \"alignIndicator\" | \"disabled\" | \"inputRef\">;\n\nexport interface ControlCardProps extends SupportedCardProps, SupportedControlProps {\n    /**\n     * Which kind of form control to render inside the card.\n     */\n    controlKind: ControlKind;\n\n    // N.B. this is split out of the root properties in the inerface because it would conflict with CardProps' HTMLDivProps\n    /**\n     * HTML input attributes to forward to the control `<input>` element.\n     */\n    inputProps?: HTMLInputProps;\n\n    /**\n     * Whether the component should use \"selected\" Card styling when checked.\n     *\n     * @default true\n     */\n    showAsSelectedWhenChecked?: boolean;\n}\n\n/**\n * ControlCard component, used to render a {@link Card} with a form control.\n *\n * @internal\n */\n\nexport const ControlCard: React.FC<ControlCardProps> = React.forwardRef((props, ref) => {\n    const {\n        alignIndicator,\n        checked: _checked,\n        children: labelContent,\n        className,\n        controlKind,\n        defaultChecked: _defaultChecked,\n        disabled,\n        inputProps,\n        inputRef,\n        onChange: _onChange,\n        showAsSelectedWhenChecked,\n        ...cardProps\n    } = props;\n\n    const { checked, onChange } = useCheckedControl(props);\n\n    // use a container element to achieve a good flex layout\n    const labelElement = <div className={Classes.CONTROL_CARD_LABEL}>{labelContent}</div>;\n    const controlProps: ControlProps = {\n        alignIndicator,\n        checked,\n        disabled,\n        inline: true,\n        inputRef,\n        labelElement,\n        onChange,\n        ...inputProps,\n    };\n    const classes = classNames(Classes.CONTROL_CARD, className, {\n        [Classes.SELECTED]: showAsSelectedWhenChecked && checked,\n    });\n\n    return (\n        <Card interactive={!disabled} className={classes} ref={ref} {...cardProps}>\n            {controlKind === \"switch\" ? (\n                <Switch {...controlProps} />\n            ) : controlKind === \"checkbox\" ? (\n                <Checkbox {...controlProps} />\n            ) : (\n                props.children\n            )}\n        </Card>\n    );\n});\nControlCard.defaultProps = {\n    alignIndicator: \"right\",\n    showAsSelectedWhenChecked: true,\n};\nControlCard.displayName = `${DISPLAYNAME_PREFIX}.ControlCard`;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,kBAAkB,QAAwB,oBAAoB;AACvE,SAASC,IAAI,QAAmB,cAAc;AAE9C,SAASC,QAAQ,EAAEC,MAAM,QAAQ,mBAAmB;AACpD,SAASC,iBAAiB,QAAQ,qBAAqB;AAkCvD;;;;;AAMA,OAAO,IAAMC,WAAW,GAA+BP,KAAK,CAACQ,UAAU,CAAC,UAACC,KAAK,EAAEC,GAAG;;EAE3E,IAAAC,cAAc,GAYdF,KAAK,CAAAE,cAZS;IACLC,QAAQ,GAWjBH,KAAK,CAAAI,OAXY;IACPC,YAAY,GAUtBL,KAAK,CAAAM,QAViB;IACtBC,SAAS,GASTP,KAAK,CAAAO,SATI;IACTC,WAAW,GAQXR,KAAK,CAAAQ,WARM;IACKC,eAAe,GAO/BT,KAAK,CAAAU,cAP0B;IAC/BC,QAAQ,GAMRX,KAAK,CAAAW,QANG;IACRC,UAAU,GAKVZ,KAAK,CAAAY,UALK;IACVC,QAAQ,GAIRb,KAAK,CAAAa,QAJG;IACEC,SAAS,GAGnBd,KAAK,CAAAe,QAHc;IACnBC,yBAAyB,GAEzBhB,KAAK,CAAAgB,yBAFoB;IACtBC,SAAS,GAAAC,MAAA,CACZlB,KAAK,EAbH,sKAaL,CADe;EAGV,IAAAmB,EAAA,GAAwBtB,iBAAiB,CAACG,KAAK,CAAC;IAA9CI,OAAO,GAAAe,EAAA,CAAAf,OAAA;IAAEW,QAAQ,GAAAI,EAAA,CAAAJ,QAA6B;EAEtD;EACA,IAAMK,YAAY,GAAG7B,KAAA,CAAA8B,aAAA;IAAKd,SAAS,EAAEf,OAAO,CAAC8B;EAAkB,GAAGjB,YAAY,CAAO;EACrF,IAAMkB,YAAY,GAAAC,QAAA;IACdtB,cAAc,EAAAA,cAAA;IACdE,OAAO,EAAAA,OAAA;IACPO,QAAQ,EAAAA,QAAA;IACRc,MAAM,EAAE,IAAI;IACZZ,QAAQ,EAAAA,QAAA;IACRO,YAAY,EAAAA,YAAA;IACZL,QAAQ,EAAAA;EAAA,GACLH,UAAU,CAChB;EACD,IAAMc,OAAO,GAAGpC,UAAU,CAACE,OAAO,CAACmC,YAAY,EAAEpB,SAAS,GAAAqB,EAAA,OACtDA,EAAA,CAACpC,OAAO,CAACqC,QAAQ,IAAGb,yBAAyB,IAAIZ,OAAO,E,IAC1D;EAEF,OACIb,KAAA,CAAA8B,aAAA,CAAC3B,IAAI,EAAA8B,QAAA;IAACM,WAAW,EAAE,CAACnB,QAAQ;IAAEJ,SAAS,EAAEmB,OAAO;IAAEzB,GAAG,EAAEA;EAAG,GAAMgB,SAAS,GACpET,WAAW,KAAK,QAAQ,GACrBjB,KAAA,CAAA8B,aAAA,CAACzB,MAAM,EAAA4B,QAAA,KAAKD,YAAY,EAAI,GAC5Bf,WAAW,KAAK,UAAU,GAC1BjB,KAAA,CAAA8B,aAAA,CAAC1B,QAAQ,EAAA6B,QAAA,KAAKD,YAAY,EAAI,GAE9BvB,KAAK,CAACM,QACT,CACE;AAEf,CAAC,CAAC;AACFR,WAAW,CAACiC,YAAY,GAAG;EACvB7B,cAAc,EAAE,OAAO;EACvBc,yBAAyB,EAAE;CAC9B;AACDlB,WAAW,CAACkC,WAAW,GAAG,GAAAC,MAAA,CAAGxC,kBAAkB,iBAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}