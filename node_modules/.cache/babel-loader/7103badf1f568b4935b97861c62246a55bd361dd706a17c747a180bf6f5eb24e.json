{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport {};","map":{"version":3,"names":[],"sources":["D:\\app\\node_modules\\@blueprintjs\\icons\\src\\svgIconProps.ts"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as React from \"react\";\n\ntype OmittedDOMAttributes = \"children\" | \"dangerouslySetInnerHTML\";\n\n/**\n * Default set of DOM attributes which are assignable as props to the root element rendered by an\n * SVG icon component. This limited set of attributes is assignable to any `<Icon>` component regardless\n * of its `tagName` prop (it works for both HTML and SVG elements).\n */\nexport type DefaultSVGIconAttributes = React.AriaAttributes &\n    Omit<React.DOMAttributes<Element>, OmittedDOMAttributes> &\n    Pick<React.HTMLAttributes<Element>, \"id\" | \"style\" | \"tabIndex\" | \"role\">;\n\n/**\n * DOM attributes which are assignable as props to the root element rendered by an SVG icon component.\n * Specify a type parameter to narrow this type and allow more attributes to be passed to the root element.\n *\n * @see https://blueprintjs.com/docs/#core/components/icon.dom-attributes\n *\n * When `tagName` is specified, either:\n *  - as a custom HTML element tag name,\n *  - as `null` to signfiy that there should be no wrapper around the `<svg>` element,\n *  - or its default value of \"span\" is used,\n * then it may be useful to narrow this type to pass along additional attributes which not supported by\n * the more general `DefaultSVGIconAttributes` interface. You can do this by specifying a generic type param\n * on `<Icon>` components, for example:\n *\n * ```\n * <Icon<HTMLSpanElement> icon=\"drag-handle-horizontal\" draggable=\"false\" />\n * ```\n */\nexport type SVGIconAttributes<T extends Element = Element> = T extends SVGElement\n    ? Omit<React.SVGAttributes<T>, OmittedDOMAttributes>\n    : T extends HTMLElement\n    ? Omit<React.HTMLAttributes<T>, OmittedDOMAttributes>\n    : DefaultSVGIconAttributes;\n\nexport interface SVGIconOwnProps {\n    /** A space-delimited list of class names to pass along to the SVG element. */\n    className?: string;\n\n    /** This component does not support child nodes. */\n    children?: never;\n\n    /**\n     * Color of icon. This is used as the `fill` attribute on the `<svg>` image\n     * so it will override any CSS `color` property, including that set by\n     * `intent`. If this prop is omitted, icon color is inherited from\n     * surrounding text.\n     */\n    color?: string;\n\n    /**\n     * String for the `title` attribute on the rendered element, which will appear\n     * on hover as a native browser tooltip.\n     */\n    htmlTitle?: string;\n\n    /**\n     * Size of the icon, in pixels. Blueprint contains 16px and 20px SVG icon\n     * images, and chooses the appropriate resolution based on this prop.\n     *\n     * @default 16\n     */\n    size?: number;\n\n    /** CSS style properties. */\n    style?: React.CSSProperties;\n\n    /**\n     * HTML tag to use for the rendered element. Commonly \"span\" or \"div\".\n     * If `null`, no wrapper will be rendered, just the `<svg>` element.\n     *\n     * @default \"span\"\n     */\n    tagName?: keyof JSX.IntrinsicElements | null;\n\n    /**\n     * Description string. This string does not appear in normal browsers, but\n     * it increases accessibility. For instance, screen readers will use it for\n     * aural feedback.\n     *\n     * If this value is nullish, `false`, or an empty string, the component will assume\n     * that the icon is decorative and `aria-hidden=\"true\"` will be applied (can be overridden\n     * by manually passing `aria-hidden` prop).\n     *\n     * @see https://www.w3.org/WAI/tutorials/images/decorative/\n     */\n    title?: string | false | null;\n\n    /** Props to apply to the `SVG` element */\n    svgProps?: React.HTMLAttributes<SVGElement>;\n}\n\n// N.B. the following inteface is defined as a type alias instead of an interface due to a TypeScript limitation\n// where interfaces cannot extend conditionally-defined union types.\n/**\n * Interface for generated icon components which have their name and icon paths statically defined\n * inside their JS implementation.\n *\n * @see https://blueprintjs.com/docs/#core/components/icon.static-components\n */\nexport type SVGIconProps<T extends Element = Element> = React.RefAttributes<T> & SVGIconAttributes<T> & SVGIconOwnProps;\n\n/**\n * The default SVG icon props interface, equivalent to `SVGIconProps` with its default type parameter.\n * This is primarly exported for documentation purposes; users should reference `SVGIconProps<T>` instead.\n */\nexport interface DefaultSVGIconProps extends React.RefAttributes<Element>, SVGIconAttributes<Element>, SVGIconOwnProps {\n    // empty interface for documentation purposes (documentalist handles this better than the SVGIconProps<T> type alias)\n}\n"],"mappings":"AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}